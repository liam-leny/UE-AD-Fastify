/* tslint:disable */
/* eslint-disable */
/**
 * Todo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Def0
 */
export interface Def0 {
    /**
     * 
     * @type {number}
     * @memberof Def0
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'name': string;
    /**
     * 
     * @type {Array<Def1>}
     * @memberof Def0
     */
    'items'?: Array<Def1>;
}
/**
 * 
 * @export
 * @interface Def1
 */
export interface Def1 {
    /**
     * 
     * @type {number}
     * @memberof Def1
     */
    'id': number;
    /**
     * 
     * @type {Def2}
     * @memberof Def1
     */
    'state': Def2;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'assignedTo'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const Def2 = {
    Pending: 'PENDING',
    InProgress: 'IN-PROGRESS',
    Done: 'DONE'
} as const;

export type Def2 = typeof Def2[keyof typeof Def2];


/**
 * The list with all items marked as done.
 * @export
 * @interface ListsIdDonePut200Response
 */
export interface ListsIdDonePut200Response {
    /**
     * 
     * @type {string}
     * @memberof ListsIdDonePut200Response
     */
    'message'?: string;
    /**
     * 
     * @type {ListsIdDonePut200ResponseData}
     * @memberof ListsIdDonePut200Response
     */
    'data'?: ListsIdDonePut200ResponseData;
}
/**
 * 
 * @export
 * @interface ListsIdDonePut200ResponseData
 */
export interface ListsIdDonePut200ResponseData {
    /**
     * 
     * @type {number}
     * @memberof ListsIdDonePut200ResponseData
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListsIdDonePut200ResponseData
     */
    'name'?: string;
    /**
     * 
     * @type {Array<ListsIdDonePut200ResponseDataItemsInner>}
     * @memberof ListsIdDonePut200ResponseData
     */
    'items'?: Array<ListsIdDonePut200ResponseDataItemsInner>;
}
/**
 * 
 * @export
 * @interface ListsIdDonePut200ResponseDataItemsInner
 */
export interface ListsIdDonePut200ResponseDataItemsInner {
    /**
     * 
     * @type {number}
     * @memberof ListsIdDonePut200ResponseDataItemsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListsIdDonePut200ResponseDataItemsInner
     */
    'state'?: ListsIdDonePut200ResponseDataItemsInnerStateEnum;
    /**
     * 
     * @type {string}
     * @memberof ListsIdDonePut200ResponseDataItemsInner
     */
    'description'?: string;
}

export const ListsIdDonePut200ResponseDataItemsInnerStateEnum = {
    Done: 'DONE'
} as const;

export type ListsIdDonePut200ResponseDataItemsInnerStateEnum = typeof ListsIdDonePut200ResponseDataItemsInnerStateEnum[keyof typeof ListsIdDonePut200ResponseDataItemsInnerStateEnum];

/**
 * Confirmation of the deleted item.
 * @export
 * @interface ListsIdItemsItemIdDelete200Response
 */
export interface ListsIdItemsItemIdDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof ListsIdItemsItemIdDelete200Response
     */
    'message'?: string;
}
/**
 * The updated item details.
 * @export
 * @interface ListsIdItemsItemIdPut200Response
 */
export interface ListsIdItemsItemIdPut200Response {
    /**
     * 
     * @type {string}
     * @memberof ListsIdItemsItemIdPut200Response
     */
    'message'?: string;
    /**
     * 
     * @type {ListsIdItemsPost201ResponseData}
     * @memberof ListsIdItemsItemIdPut200Response
     */
    'data'?: ListsIdItemsPost201ResponseData;
}
/**
 * 
 * @export
 * @interface ListsIdItemsItemIdPutRequest
 */
export interface ListsIdItemsItemIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ListsIdItemsItemIdPutRequest
     */
    'state': ListsIdItemsItemIdPutRequestStateEnum;
    /**
     * 
     * @type {string}
     * @memberof ListsIdItemsItemIdPutRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ListsIdItemsItemIdPutRequest
     */
    'assignedTo'?: string;
}

export const ListsIdItemsItemIdPutRequestStateEnum = {
    Pending: 'PENDING',
    InProgress: 'IN-PROGRESS',
    Done: 'DONE'
} as const;

export type ListsIdItemsItemIdPutRequestStateEnum = typeof ListsIdItemsItemIdPutRequestStateEnum[keyof typeof ListsIdItemsItemIdPutRequestStateEnum];

/**
 * The newly created item.
 * @export
 * @interface ListsIdItemsPost201Response
 */
export interface ListsIdItemsPost201Response {
    /**
     * 
     * @type {string}
     * @memberof ListsIdItemsPost201Response
     */
    'message'?: string;
    /**
     * 
     * @type {ListsIdItemsPost201ResponseData}
     * @memberof ListsIdItemsPost201Response
     */
    'data'?: ListsIdItemsPost201ResponseData;
}
/**
 * 
 * @export
 * @interface ListsIdItemsPost201ResponseData
 */
export interface ListsIdItemsPost201ResponseData {
    /**
     * 
     * @type {number}
     * @memberof ListsIdItemsPost201ResponseData
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListsIdItemsPost201ResponseData
     */
    'state'?: ListsIdItemsPost201ResponseDataStateEnum;
    /**
     * 
     * @type {string}
     * @memberof ListsIdItemsPost201ResponseData
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListsIdItemsPost201ResponseData
     */
    'assignedTo'?: string;
}

export const ListsIdItemsPost201ResponseDataStateEnum = {
    Pending: 'PENDING',
    InProgress: 'IN-PROGRESS',
    Done: 'DONE'
} as const;

export type ListsIdItemsPost201ResponseDataStateEnum = typeof ListsIdItemsPost201ResponseDataStateEnum[keyof typeof ListsIdItemsPost201ResponseDataStateEnum];

/**
 * 
 * @export
 * @interface ListsIdItemsPostRequest
 */
export interface ListsIdItemsPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ListsIdItemsPostRequest
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ListsIdItemsPostRequest
     */
    'state'?: ListsIdItemsPostRequestStateEnum;
    /**
     * 
     * @type {string}
     * @memberof ListsIdItemsPostRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ListsIdItemsPostRequest
     */
    'assignedTo'?: string;
}

export const ListsIdItemsPostRequestStateEnum = {
    Pending: 'PENDING',
    InProgress: 'IN-PROGRESS',
    Done: 'DONE'
} as const;

export type ListsIdItemsPostRequestStateEnum = typeof ListsIdItemsPostRequestStateEnum[keyof typeof ListsIdItemsPostRequestStateEnum];

/**
 * The updated list details.
 * @export
 * @interface ListsIdPut200Response
 */
export interface ListsIdPut200Response {
    /**
     * 
     * @type {string}
     * @memberof ListsIdPut200Response
     */
    'message'?: string;
    /**
     * 
     * @type {ListsPost201ResponseData}
     * @memberof ListsIdPut200Response
     */
    'data'?: ListsPost201ResponseData;
}
/**
 * 
 * @export
 * @interface ListsIdPutRequest
 */
export interface ListsIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ListsIdPutRequest
     */
    'name': string;
}
/**
 * The newly created list.
 * @export
 * @interface ListsPost201Response
 */
export interface ListsPost201Response {
    /**
     * 
     * @type {string}
     * @memberof ListsPost201Response
     */
    'message'?: string;
    /**
     * 
     * @type {ListsPost201ResponseData}
     * @memberof ListsPost201Response
     */
    'data'?: ListsPost201ResponseData;
}
/**
 * 
 * @export
 * @interface ListsPost201ResponseData
 */
export interface ListsPost201ResponseData {
    /**
     * 
     * @type {number}
     * @memberof ListsPost201ResponseData
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListsPost201ResponseData
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ListsPostRequest
 */
export interface ListsPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ListsPostRequest
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ListsPostRequest
     */
    'name': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/example/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exampleGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exampleGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.exampleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exampleGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.exampleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exampleGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).exampleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ItemsApi - axios parameter creator
 * @export
 */
export const ItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove an item from a list by its ID.
         * @summary Delete an item
         * @param {number} id 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdDelete: async (id: number, itemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdItemsItemIdDelete', 'id', id)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('listsIdItemsItemIdDelete', 'itemId', itemId)
            const localVarPath = `/lists/{id}/items/{itemId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the details of an item within a list.
         * @summary Update an item
         * @param {number} id 
         * @param {string} itemId 
         * @param {ListsIdItemsItemIdPutRequest} listsIdItemsItemIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdPut: async (id: number, itemId: string, listsIdItemsItemIdPutRequest: ListsIdItemsItemIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdItemsItemIdPut', 'id', id)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('listsIdItemsItemIdPut', 'itemId', itemId)
            // verify required parameter 'listsIdItemsItemIdPutRequest' is not null or undefined
            assertParamExists('listsIdItemsItemIdPut', 'listsIdItemsItemIdPutRequest', listsIdItemsItemIdPutRequest)
            const localVarPath = `/lists/{id}/items/{itemId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listsIdItemsItemIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new item to a specific list.
         * @summary Add a new item
         * @param {string} id 
         * @param {ListsIdItemsPostRequest} listsIdItemsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsPost: async (id: string, listsIdItemsPostRequest: ListsIdItemsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdItemsPost', 'id', id)
            // verify required parameter 'listsIdItemsPostRequest' is not null or undefined
            assertParamExists('listsIdItemsPost', 'listsIdItemsPostRequest', listsIdItemsPostRequest)
            const localVarPath = `/lists/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listsIdItemsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsApi - functional programming interface
 * @export
 */
export const ItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove an item from a list by its ID.
         * @summary Delete an item
         * @param {number} id 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdItemsItemIdDelete(id: number, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsIdItemsItemIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdItemsItemIdDelete(id, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.listsIdItemsItemIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the details of an item within a list.
         * @summary Update an item
         * @param {number} id 
         * @param {string} itemId 
         * @param {ListsIdItemsItemIdPutRequest} listsIdItemsItemIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdItemsItemIdPut(id: number, itemId: string, listsIdItemsItemIdPutRequest: ListsIdItemsItemIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsIdItemsItemIdPut200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdItemsItemIdPut(id, itemId, listsIdItemsItemIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.listsIdItemsItemIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a new item to a specific list.
         * @summary Add a new item
         * @param {string} id 
         * @param {ListsIdItemsPostRequest} listsIdItemsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdItemsPost(id: string, listsIdItemsPostRequest: ListsIdItemsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsIdItemsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdItemsPost(id, listsIdItemsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.listsIdItemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ItemsApi - factory interface
 * @export
 */
export const ItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemsApiFp(configuration)
    return {
        /**
         * Remove an item from a list by its ID.
         * @summary Delete an item
         * @param {number} id 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdDelete(id: number, itemId: string, options?: RawAxiosRequestConfig): AxiosPromise<ListsIdItemsItemIdDelete200Response> {
            return localVarFp.listsIdItemsItemIdDelete(id, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the details of an item within a list.
         * @summary Update an item
         * @param {number} id 
         * @param {string} itemId 
         * @param {ListsIdItemsItemIdPutRequest} listsIdItemsItemIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsItemIdPut(id: number, itemId: string, listsIdItemsItemIdPutRequest: ListsIdItemsItemIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListsIdItemsItemIdPut200Response> {
            return localVarFp.listsIdItemsItemIdPut(id, itemId, listsIdItemsItemIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new item to a specific list.
         * @summary Add a new item
         * @param {string} id 
         * @param {ListsIdItemsPostRequest} listsIdItemsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdItemsPost(id: string, listsIdItemsPostRequest: ListsIdItemsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListsIdItemsPost201Response> {
            return localVarFp.listsIdItemsPost(id, listsIdItemsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
export class ItemsApi extends BaseAPI {
    /**
     * Remove an item from a list by its ID.
     * @summary Delete an item
     * @param {number} id 
     * @param {string} itemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public listsIdItemsItemIdDelete(id: number, itemId: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).listsIdItemsItemIdDelete(id, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the details of an item within a list.
     * @summary Update an item
     * @param {number} id 
     * @param {string} itemId 
     * @param {ListsIdItemsItemIdPutRequest} listsIdItemsItemIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public listsIdItemsItemIdPut(id: number, itemId: string, listsIdItemsItemIdPutRequest: ListsIdItemsItemIdPutRequest, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).listsIdItemsItemIdPut(id, itemId, listsIdItemsItemIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new item to a specific list.
     * @summary Add a new item
     * @param {string} id 
     * @param {ListsIdItemsPostRequest} listsIdItemsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public listsIdItemsPost(id: string, listsIdItemsPostRequest: ListsIdItemsPostRequest, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).listsIdItemsPost(id, listsIdItemsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListsApi - axios parameter creator
 * @export
 */
export const ListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch all available lists with their respective items.
         * @summary Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set all items within a list to a \'DONE\' state.
         * @summary Mark a list as done
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdDonePut: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdDonePut', 'id', id)
            const localVarPath = `/lists/{id}/done`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify the name of an existing list using its ID.
         * @summary Update a list
         * @param {number} id 
         * @param {ListsIdPutRequest} listsIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdPut: async (id: number, listsIdPutRequest: ListsIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdPut', 'id', id)
            // verify required parameter 'listsIdPutRequest' is not null or undefined
            assertParamExists('listsIdPut', 'listsIdPutRequest', listsIdPutRequest)
            const localVarPath = `/lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listsIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new list with a unique ID and name.
         * @summary Add a new list
         * @param {ListsPostRequest} listsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost: async (listsPostRequest: ListsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listsPostRequest' is not null or undefined
            assertParamExists('listsPost', 'listsPostRequest', listsPostRequest)
            const localVarPath = `/lists/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListsApi - functional programming interface
 * @export
 */
export const ListsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListsApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch all available lists with their respective items.
         * @summary Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set all items within a list to a \'DONE\' state.
         * @summary Mark a list as done
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdDonePut(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsIdDonePut200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdDonePut(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdDonePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Modify the name of an existing list using its ID.
         * @summary Update a list
         * @param {number} id 
         * @param {ListsIdPutRequest} listsIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdPut(id: number, listsIdPutRequest: ListsIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsIdPut200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdPut(id, listsIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new list with a unique ID and name.
         * @summary Add a new list
         * @param {ListsPostRequest} listsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsPost(listsPostRequest: ListsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsPost(listsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ListsApi - factory interface
 * @export
 */
export const ListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListsApiFp(configuration)
    return {
        /**
         * Fetch all available lists with their respective items.
         * @summary Get all lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Set all items within a list to a \'DONE\' state.
         * @summary Mark a list as done
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdDonePut(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ListsIdDonePut200Response> {
            return localVarFp.listsIdDonePut(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify the name of an existing list using its ID.
         * @summary Update a list
         * @param {number} id 
         * @param {ListsIdPutRequest} listsIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdPut(id: number, listsIdPutRequest: ListsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListsIdPut200Response> {
            return localVarFp.listsIdPut(id, listsIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new list with a unique ID and name.
         * @summary Add a new list
         * @param {ListsPostRequest} listsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost(listsPostRequest: ListsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListsPost201Response> {
            return localVarFp.listsPost(listsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
export class ListsApi extends BaseAPI {
    /**
     * Fetch all available lists with their respective items.
     * @summary Get all lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsGet(options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set all items within a list to a \'DONE\' state.
     * @summary Mark a list as done
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdDonePut(id: number, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdDonePut(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify the name of an existing list using its ID.
     * @summary Update a list
     * @param {number} id 
     * @param {ListsIdPutRequest} listsIdPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdPut(id: number, listsIdPutRequest: ListsIdPutRequest, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdPut(id, listsIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new list with a unique ID and name.
     * @summary Add a new list
     * @param {ListsPostRequest} listsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsPost(listsPostRequest: ListsPostRequest, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsPost(listsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



